# Parameter definitions for thorn CarpetX

PRIVATE:

BOOLEAN verbose "Verbose output" STEERABLE=always
{
} no

BOOLEAN poison_undefined_values "Set undefined grid point values to nan" STEERABLE=always
{
} yes



STRING amrex_parameters[100] "Additional AMReX parameters"
{
  "" :: "do nothing"
  "[^=]+=.*" :: "keyword=value"
} ""



CCTK_REAL xmin "Domain size (location of vertices)"
{
  *:* :: ""
} -1.0

CCTK_REAL xmax "Domain size (location of vertices)"
{
  *:* :: ""
} 1.0

CCTK_REAL ymin "Domain size (location of vertices)"
{
  *:* :: ""
} -1.0

CCTK_REAL ymax "Domain size (location of vertices)"
{
  *:* :: ""
} 1.0

CCTK_REAL zmin "Domain size (location of vertices)"
{
  *:* :: ""
} -1.0

CCTK_REAL zmax "Domain size (location of vertices)"
{
  *:* :: ""
} 1.0



CCTK_INT ncells_x "Number of grid cells"
{
  1:* :: "must be a multiple of the blocking factor"
} 128

CCTK_INT ncells_y "Number of grid cells"
{
  1:* :: "must be a multiple of the blocking factor"
} 128

CCTK_INT ncells_z "Number of grid cells"
{
  1:* :: "must be a multiple of the blocking factor"
} 128



RESTRICTED:

BOOLEAN periodic "Periodic boundary conditions"
{
  "yes" :: "must be set for any periodic_x,y,z to be effective"
  "no"  :: "no periodicity"
} "no"

BOOLEAN periodic_x "Periodic boundary conditions in x-direction"
{
  "yes" :: "periodic in x direction, requires periodic=yes as well"
  "no"  :: "not periodic in x direction"
} "yes"

BOOLEAN periodic_y "Periodic boundary conditions in y-direction"
{
  "yes" :: "periodic in y direction, requires periodic=yes as well"
  "no"  :: "not periodic in y direction"
} "yes"

BOOLEAN periodic_z "Periodic boundary conditions in z-direction"
{
  "yes" :: "periodic in z direction, requires periodic=yes as well"
  "no"  :: "not periodic in z direction"
} "yes"

RESTRICTED:

BOOLEAN use_subcycling_wip "Use subcycling in time"
{
} no



PRIVATE:

BOOLEAN reflection_x "Reflection symmetry at the lower x boundary"
{
} no

BOOLEAN reflection_y "Reflection symmetry at the lower y boundary"
{
} no

BOOLEAN reflection_z "Reflection symmetry at the lower z boundary"
{
} no

BOOLEAN reflection_upper_x "Reflection symmetry at the upper x boundary"
{
} no

BOOLEAN reflection_upper_y "Reflection symmetry at the upper y boundary"
{
} no

BOOLEAN reflection_upper_z "Reflection symmetry at the upper z boundary"
{
} no



KEYWORD boundary_x "Boundary condition at lower x boundary"
{
  "none" :: "don't apply any boundary"
  "dirichlet" :: "Dirichlet"
  "linear extrapolation" :: "Linear extrapolation"
  "neumann" :: "Neumann"
  "robin" :: "Robin"
} "none"

KEYWORD boundary_y "Boundary condition at lower y boundary"
{
  "none" :: "don't apply any boundary"
  "dirichlet" :: "Dirichlet"
  "linear extrapolation" :: "Linear extrapolation"
  "neumann" :: "Neumann"
  "robin" :: "Robin"
} "none"

KEYWORD boundary_z "Boundary condition at lower z boundary"
{
  "none" :: "don't apply any boundary"
  "dirichlet" :: "Dirichlet"
  "linear extrapolation" :: "Linear extrapolation"
  "neumann" :: "Neumann"
  "robin" :: "Robin"
} "none"

KEYWORD boundary_upper_x "Boundary condition at upper x boundary"
{
  "none" :: "don't apply any boundary"
  "dirichlet" :: "Dirichlet"
  "linear extrapolation" :: "Linear extrapolation"
  "neumann" :: "Neumann"
  "robin" :: "Robin"
} "none"

KEYWORD boundary_upper_y "Boundary condition at upper y boundary"
{
  "none" :: "don't apply any boundary"
  "dirichlet" :: "Dirichlet"
  "linear extrapolation" :: "Linear extrapolation"
  "neumann" :: "Neumann"
  "robin" :: "Robin"
} "none"

KEYWORD boundary_upper_z "Boundary condition at upper z boundary"
{
  "none" :: "don't apply any boundary"
  "dirichlet" :: "Dirichlet"
  "linear extrapolation" :: "Linear extrapolation"
  "neumann" :: "Neumann"
  "robin" :: "Robin"
} "none"



STRING dirichlet_x_vars "Override boundary condition at lower x boundary"
{
  ".*" :: ""
} ""

STRING dirichlet_y_vars "Override boundary condition at lower y boundary"
{
  ".*" :: ""
} ""

STRING dirichlet_z_vars "Override boundary condition at lower z boundary"
{
  ".*" :: ""
} ""

STRING dirichlet_upper_x_vars "Override boundary condition at upper x boundary"
{
  ".*" :: ""
} ""

STRING dirichlet_upper_y_vars "Override boundary condition at upper y boundary"
{
  ".*" :: ""
} ""

STRING dirichlet_upper_z_vars "Override boundary condition at upper z boundary"
{
  ".*" :: ""
} ""



STRING linear_extrapolation_x_vars "Override boundary condition at lower x boundary"
{
  ".*" :: ""
} ""

STRING linear_extrapolation_y_vars "Override boundary condition at lower y boundary"
{
  ".*" :: ""
} ""

STRING linear_extrapolation_z_vars "Override boundary condition at lower z boundary"
{
  ".*" :: ""
} ""

STRING linear_extrapolation_upper_x_vars "Override boundary condition at upper x boundary"
{
  ".*" :: ""
} ""

STRING linear_extrapolation_upper_y_vars "Override boundary condition at upper y boundary"
{
  ".*" :: ""
} ""

STRING linear_extrapolation_upper_z_vars "Override boundary condition at upper z boundary"
{
  ".*" :: ""
} ""



STRING neumann_x_vars "Override boundary condition at lower x boundary"
{
  ".*" :: ""
} ""

STRING neumann_y_vars "Override boundary condition at lower y boundary"
{
  ".*" :: ""
} ""

STRING neumann_z_vars "Override boundary condition at lower z boundary"
{
  ".*" :: ""
} ""

STRING neumann_upper_x_vars "Override boundary condition at upper x boundary"
{
  ".*" :: ""
} ""

STRING neumann_upper_y_vars "Override boundary condition at upper y boundary"
{
  ".*" :: ""
} ""

STRING neumann_upper_z_vars "Override boundary condition at upper z boundary"
{
  ".*" :: ""
} ""



STRING robin_x_vars "Override boundary condition at lower x boundary"
{
  ".*" :: ""
} ""

STRING robin_y_vars "Override boundary condition at lower y boundary"
{
  ".*" :: ""
} ""

STRING robin_z_vars "Override boundary condition at lower z boundary"
{
  ".*" :: ""
} ""

STRING robin_upper_x_vars "Override boundary condition at upper x boundary"
{
  ".*" :: ""
} ""

STRING robin_upper_y_vars "Override boundary condition at upper y boundary"
{
  ".*" :: ""
} ""

STRING robin_upper_z_vars "Override boundary condition at upper z boundary"
{
  ".*" :: ""
} ""



CCTK_INT blocking_factor_x "Blocking factor" STEERABLE=recover
{
  1:* :: ""
} 8

CCTK_INT blocking_factor_y "Blocking factor" STEERABLE=recover
{
  1:* :: ""
} 8

CCTK_INT blocking_factor_z "Blocking factor" STEERABLE=recover
{
  1:* :: "must be a power of 2"
} 8

CCTK_REAL grid_efficiency "Minimum AMR grid efficiency" STEERABLE=recover
{
  0.0:* :: ""
} 0.7

CCTK_INT max_grid_size_x "Maximum grid size" STEERABLE=always
{
  1:* :: "must be a multiple of the blocking factor"
} 32

CCTK_INT max_grid_size_y "Maximum grid size" STEERABLE=always
{
  1:* :: "must be a multiple of the blocking factor"
} 32

CCTK_INT max_grid_size_z "Maximum grid size" STEERABLE=always
{
  1:* :: "must be a multiple of the blocking factor"
} 32

CCTK_INT max_grid_sizes_x[20] "Maximum grid size" STEERABLE=always
{
  -1 :: "use value from max_grid_size_x"
  1:* :: "must be a multiple of the blocking factor"
} -1

CCTK_INT max_grid_sizes_y[20] "Maximum grid size" STEERABLE=always
{
  -1 :: "use value from max_grid_size_y"
  1:* :: "must be a multiple of the blocking factor"
} -1

CCTK_INT max_grid_sizes_z[20] "Maximum grid size" STEERABLE=always
{
  -1 :: "use value from max_grid_size_z"
  1:* :: "must be a multiple of the blocking factor"
} -1



BOOLEAN refine_grid_layout "Ensure that each MPI process has at least one grid" STEERABLE=recover
{
} yes

CCTK_INT max_tile_size_x "Maximum tile size" STEERABLE=recover
{
  1:* :: ""
} 1024000

CCTK_INT max_tile_size_y "Maximum tile size" STEERABLE=recover
{
  1:* :: ""
} 16

CCTK_INT max_tile_size_z "Maximum tile size" STEERABLE=recover
{
  1:* :: ""
} 32



CCTK_INT max_num_levels "Maximum number of refinement levels"
{
  1:* :: ""
} 1


#TODO: move to CarpetRegridX
CCTK_INT regrid_every "Regridding interval" STEERABLE=always
{
  0 :: "never"
  1:* :: "every that many iterations"
} 0

#TODO: eliminate in favor of regrid_error being a true/false field
CCTK_REAL regrid_error_threshold "Regridding error threshold" STEERABLE=always
{
  0.0:* :: ""
} 1.0



CCTK_INT ghost_size "Number of ghost zones"
{
  -1 :: "use ghost_size_[xyz]"
  0:* :: ""
} -1

CCTK_INT ghost_size_x "Number of ghost zones"
{
  0:* :: ""
} 1

CCTK_INT ghost_size_y "Number of ghost zones"
{
  0:* :: ""
} 1

CCTK_INT ghost_size_z "Number of ghost zones"
{
  0:* :: ""
} 1



KEYWORD prolongation_type "Prolongation type"
{
  "interpolate" :: "interpolate between data points"
  "conservative" :: "interpolate cell averages, ensuring conservation"
  "ddf" :: "interpolate in vertex centred and conserve (with one order lower) in cell centred directions"
  "eno" :: "interpolate in vertex centred and minmod-conserve in cell centred directions"
  "minmod" :: "interpolate in vertex centred and ENO-conserve in cell centred directions"
  "hermite" :: "Hermite-interpolate in vertex centred and conserve in cell centred directions"
  "natural" :: "interpolate in vertex centred and conserve in cell centred directions, using the same order"
  "poly-cons3lfb" :: "interpolate polynomially in vertex centred directions and conserve with 3rd order accuracy and a linear fallback in cell centred directions"
  "poly-eno3lfb" :: "interpolate polynomially in vertex centred directions and use ENO stencils with 3rd order accuracy and a linear fallback in cell centred directions"
} "natural"

CCTK_INT prolongation_order "Prolongation order"
{
  0:* :: ""
} 1

BOOLEAN prolongate_per_group "Prolongate all variables in a group together"
{
} no

CCTK_INT interpolation_order "Interpolation order" STEERABLE=always
{
  0:* :: ""
} 1



BOOLEAN do_reflux "Manage flux registers to ensure conservation"
{
} yes



BOOLEAN do_restrict "Automatically restrict fine to coarse grid functions"
{
} yes



BOOLEAN restrict_during_sync "Restrict fine to coarse grid functions when syncing"
{
} yes



CCTK_REAL dtfac "The standard timestep condition dt = dtfac*min(delta_space)"
{
  *:* :: ""
} 0.5



KEYWORD kernel_launch_method "Kernel launch method" STEERABLE=always
{
  "serial"  :: "no parallelism"
  "openmp"  :: "use OpenMP"
  "cuda"    :: "target CUDA"
  "default" :: "Use OpenMP for CPU builds and CUDA for GPU builds"
} "default"

BOOLEAN gpu_sync_after_every_kernel "Call amrex::Gpu::streamSynchronize after every kernel (EXPENSIVE)" STEERABLE=recover
{
} no



KEYWORD filereader_method "I/O method for file reader" STEERABLE=recover
{
  "error" :: "Abort with error when file reader is used"
  "openpmd" :: ""
  "silo" :: ""
} "error"

KEYWORD recover_method "I/O method for recovery" STEERABLE=recover
{
  "error" :: "Abort with error instead of recovering"
  "openpmd" :: ""
  "silo" :: ""
} "error"

KEYWORD checkpoint_method "I/O method for checkpointing" STEERABLE=recover
{
  "error" :: "Abort with error instead of checkpointing"
  "openpmd" :: ""
  "silo" :: ""
} "error"



STRING out_adios2_vars "Variables to output in ADIOS2 format" STEERABLE=always
{
  ".*" :: ""
} ""

INT out_adios2_every "Output in ADIOS2 format every that many iterations" STEERABLE=always
{
  -1 :: "use value of IO::out_every"
  0 :: "never output ADIOS2"
  1:* :: "every that many iterations"
} -1



BOOLEAN out_metadata "Output metadata in YAML format?" STEERABLE=always
{
} yes

INT out_metadata_every "Output metadata every that many iterations" STEERABLE=always
{
  -1 :: "use value of IO::out_every"
  0 :: "never output metadata"
  1:* :: "every that many iterations"
} -1



BOOLEAN out_performance "Output performance data in YAML format?" STEERABLE=always
{
} yes

INT out_performance_every "Output performance data every that many iterations" STEERABLE=always
{
  -1 :: "use value of IO::out_every"
  0 :: "never output performance data"
  1:* :: "every that many iterations"
} -1



STRING out_norm_vars "Variables to output as norms" STEERABLE=always
{
  ".*" :: ""
} ""

INT out_norm_every "Output norms every that many iterations" STEERABLE=always
{
  -1 :: "use value of IO::out_every"
  0 :: "never output norms"
  1:* :: "every that many iterations"
} -1

BOOLEAN out_norm_omit_unstable "Omit unstable norms (e.g. maxloc)" STEERABLE=always
{
} no

BOOLEAN out_norm_omit_sumloc_for_backward_compatibility "Omit sumloc norms" STEERABLE=always
{
} no



KEYWORD openpmd_format "openPMD file format" STEERABLE=always
{
  "HDF5" :: ""
  "ADIOS1" :: "requires openPMD_api <0.16"
  "ADIOS2_auto" :: "Choose ADIOS2 format automatically (either ADIOS2_BP5 or ADIOS2_BP4)"
  "ADIOS2" :: "requires openPMD_api <0.15"
  "ADIOS2_BP" :: "requires openPMD_api >=0.15"
  "ADIOS2_BP4" :: "requires openPMD_api >=0.15"
  "ADIOS2_BP5" :: "requires openPMD_api >=0.15"
  "ADIOS2_SST" :: ""
  "ADIOS2_SSC" :: ""
  "JSON" :: ""
  "TOML" :: "requires openPMD_api >=0.16"
  "GENERIC" :: "requires openPMD_api >=0.16"
} "ADIOS2_auto"

STRING out_openpmd_vars "Variables to output in openPMD format" STEERABLE=always
{
  ".*" :: ""
} ""

INT out_openpmd_every "Output in openPMD format every that many iterations" STEERABLE=always
{
  -1 :: "use value of IO::out_every"
  0 :: "never output openPMD"
  1:* :: "every that many iterations"
} -1



STRING out_plotfile_groups "Groups to output as AMReX plotfile" STEERABLE=always
{
  ".*" :: ""
} ""

INT out_plotfile_every "Output in plotfile format every that many iterations" STEERABLE=always
{
  -1 :: "use value of IO::out_every"
  0 :: "never output plotfile"
  1:* :: "every that many iterations"
} -1



STRING out_silo_vars "Variables to output in Silo format" STEERABLE=always
{
  ".*" :: ""
} ""

INT out_silo_every "Output in Silo format every that many iterations" STEERABLE=always
{
  -1 :: "use value of IO::out_every"
  0 :: "never output Silo"
  1:* :: "every that many iterations"
} -1




BOOLEAN out_tsv "3d Output in TSV (tab-separated values) format?" STEERABLE=always
{
} no



STRING out_tsv_vars "Variables to output in 1d TSV format" STEERABLE=always
{
  ".*" :: ""
} ""

INT out_tsv_every "Output in TSV format every that many iterations" STEERABLE=always
{
  -1 :: "use value of IO::out_every"
  0 :: "never output TSV"
  1:* :: "every that many iterations"
} -1



SHARES: Cactus

USES BOOLEAN terminate_next
USES KEYWORD terminate
USES CCTK_INT cctk_itlast
USES CCTK_REAL cctk_initial_time
USES CCTK_REAL cctk_final_time
USES CCTK_REAL max_runtime
USES KEYWORD presync_mode

SHARES: IO

USES STRING filereader_ID_dir
USES STRING filereader_ID_files
USES STRING filereader_ID_vars

USES STRING out_dir
USES CCTK_INT out_every
USES KEYWORD out_mode
USES CCTK_INT out_proc_every

USES BOOLEAN checkpoint_ID
USES INT checkpoint_every
USES REAL checkpoint_every_walltime_hours
USES BOOLEAN checkpoint_on_terminate
USES STRING checkpoint_dir
USES STRING checkpoint_file

USES KEYWORD recover
USES STRING recover_dir
USES STRING recover_file

USES CCTK_REAL out_xline_y
USES CCTK_REAL out_xline_z
USES CCTK_REAL out_yline_x
USES CCTK_REAL out_yline_z
USES CCTK_REAL out_zline_x
USES CCTK_REAL out_zline_y
