# Parameter definitions for thorn CarpetX

PRIVATE:

BOOLEAN verbose "Verbose output" STEERABLE=always
{
} no

BOOLEAN poison_undefined_values "Set undefined grid point values to nan" STEERABLE=always
{
} yes



CCTK_REAL xmin "Domain size (location of vertices)"
{
  *:* :: ""
} -1.0

CCTK_REAL xmax "Domain size (location of vertices)"
{
  *:* :: ""
} 1.0

CCTK_REAL ymin "Domain size (location of vertices)"
{
  *:* :: ""
} -1.0

CCTK_REAL ymax "Domain size (location of vertices)"
{
  *:* :: ""
} 1.0

CCTK_REAL zmin "Domain size (location of vertices)"
{
  *:* :: ""
} -1.0

CCTK_REAL zmax "Domain size (location of vertices)"
{
  *:* :: ""
} 1.0



CCTK_INT ncells_x "Number of grid cells"
{
  1:* :: "must be a multiple of the blocking factor"
} 128

CCTK_INT ncells_y "Number of grid cells"
{
  1:* :: "must be a multiple of the blocking factor"
} 128

CCTK_INT ncells_z "Number of grid cells"
{
  1:* :: "must be a multiple of the blocking factor"
} 128



RESTRICTED:

BOOLEAN periodic_x "Periodic"
{
} no

BOOLEAN periodic_y "Periodic"
{
} no

BOOLEAN periodic_z "Periodic"
{
} no



PRIVATE:

BOOLEAN reflection_x "Reflection symmetry at the lower x boundary"
{
} no

BOOLEAN reflection_y "Reflection symmetry at the lower y boundary"
{
} no

BOOLEAN reflection_z "Reflection symmetry at the lower z boundary"
{
} no

BOOLEAN reflection_upper_x "Reflection symmetry at the upper x boundary"
{
} no

BOOLEAN reflection_upper_y "Reflection symmetry at the upper y boundary"
{
} no

BOOLEAN reflection_upper_z "Reflection symmetry at the upper z boundary"
{
} no



KEYWORD boundary_x "Boundary condition at lower x boundary"
{
  "none" :: "don't apply any boundary"
  "dirichlet" :: "Dirichlet"
  "linear extrapolation" :: "Linear extrapolation"
  "neumann" :: "Neumann"
} "none"

KEYWORD boundary_y "Boundary condition at lower y boundary"
{
  "none" :: "don't apply any boundary"
  "dirichlet" :: "Dirichlet"
  "linear extrapolation" :: "Linear extrapolation"
  "neumann" :: "Neumann"
} "none"

KEYWORD boundary_z "Boundary condition at lower z boundary"
{
  "none" :: "don't apply any boundary"
  "dirichlet" :: "Dirichlet"
  "linear extrapolation" :: "Linear extrapolation"
  "neumann" :: "Neumann"
} "none"

KEYWORD boundary_upper_x "Boundary condition at upper x boundary"
{
  "none" :: "don't apply any boundary"
  "dirichlet" :: "Dirichlet"
  "linear extrapolation" :: "Linear extrapolation"
  "neumann" :: "Neumann"
} "none"

KEYWORD boundary_upper_y "Boundary condition at upper y boundary"
{
  "none" :: "don't apply any boundary"
  "dirichlet" :: "Dirichlet"
  "linear extrapolation" :: "Linear extrapolation"
  "neumann" :: "Neumann"
} "none"

KEYWORD boundary_upper_z "Boundary condition at upper z boundary"
{
  "none" :: "don't apply any boundary"
  "dirichlet" :: "Dirichlet"
  "linear extrapolation" :: "Linear extrapolation"
  "neumann" :: "Neumann"
} "none"



STRING dirichlet_x_vars "Override boundary condition at lower x boundary"
{
  ".*" :: ""
} ""

STRING dirichlet_y_vars "Override boundary condition at lower y boundary"
{
  ".*" :: ""
} ""

STRING dirichlet_z_vars "Override boundary condition at lower z boundary"
{
  ".*" :: ""
} ""

STRING dirichlet_upper_x_vars "Override boundary condition at upper x boundary"
{
  ".*" :: ""
} ""

STRING dirichlet_upper_y_vars "Override boundary condition at upper y boundary"
{
  ".*" :: ""
} ""

STRING dirichlet_upper_z_vars "Override boundary condition at upper z boundary"
{
  ".*" :: ""
} ""



STRING linear_extrapolation_x_vars "Override boundary condition at lower x boundary"
{
  ".*" :: ""
} ""

STRING linear_extrapolation_y_vars "Override boundary condition at lower y boundary"
{
  ".*" :: ""
} ""

STRING linear_extrapolation_z_vars "Override boundary condition at lower z boundary"
{
  ".*" :: ""
} ""

STRING linear_extrapolation_upper_x_vars "Override boundary condition at upper x boundary"
{
  ".*" :: ""
} ""

STRING linear_extrapolation_upper_y_vars "Override boundary condition at upper y boundary"
{
  ".*" :: ""
} ""

STRING linear_extrapolation_upper_z_vars "Override boundary condition at upper z boundary"
{
  ".*" :: ""
} ""



STRING neumann_x_vars "Override boundary condition at lower x boundary"
{
  ".*" :: ""
} ""

STRING neumann_y_vars "Override boundary condition at lower y boundary"
{
  ".*" :: ""
} ""

STRING neumann_z_vars "Override boundary condition at lower z boundary"
{
  ".*" :: ""
} ""

STRING neumann_upper_x_vars "Override boundary condition at upper x boundary"
{
  ".*" :: ""
} ""

STRING neumann_upper_y_vars "Override boundary condition at upper y boundary"
{
  ".*" :: ""
} ""

STRING neumann_upper_z_vars "Override boundary condition at upper z boundary"
{
  ".*" :: ""
} ""



CCTK_INT blocking_factor_x "Blocking factor"
{
  1:* :: ""
} 8

CCTK_INT blocking_factor_y "Blocking factor"
{
  1:* :: ""
} 8

CCTK_INT blocking_factor_z "Blocking factor"
{
  1:* :: "must be a power of 2"
} 8

CCTK_INT max_grid_size_x "Maximum grid size"
{
  1:* :: "must be a multiple of the blocking factor"
} 32

CCTK_INT max_grid_size_y "Maximum grid size"
{
  1:* :: "must be a multiple of the blocking factor"
} 32

CCTK_INT max_grid_size_z "Maximum grid size"
{
  1:* :: "must be a multiple of the blocking factor"
} 32

CCTK_INT max_tile_size_x "Maximum tile size"
{
  1:* :: ""
} 1024000

CCTK_INT max_tile_size_y "Maximum tile size"
{
  1:* :: ""
} 16

CCTK_INT max_tile_size_z "Maximum tile size"
{
  1:* :: ""
} 32

CCTK_REAL grid_efficiency "Minimum AMR grid efficiency"
{
  0.0:* :: ""
} 0.7



CCTK_INT max_num_levels "Maximum number of refinement levels"
{
  1:* :: ""
} 1

CCTK_INT regrid_every "Regridding interval" STEERABLE=always
{
  0 :: "never"
  1:* :: "every that many iterations"
} 0

CCTK_REAL regrid_error_threshold "Regridding error threshold" STEERABLE=always
{
  0.0:* :: ""
} 1.0



CCTK_INT ghost_size "Number of ghost zones"
{
  -1 :: "use ghost_size_[xyz]"
  0:* :: ""
} -1

CCTK_INT ghost_size_x "Number of ghost zones"
{
  0:* :: ""
} 1

CCTK_INT ghost_size_y "Number of ghost zones"
{
  0:* :: ""
} 1

CCTK_INT ghost_size_z "Number of ghost zones"
{
  0:* :: ""
} 1



KEYWORD prolongation_type "Prolongation type"
{
  "interpolate" :: "interpolate between data points"
  "conservative" :: "interpolate cell averages, ensuring conservation"
  "ddf" :: "interpolate in vertex centred and conserve in cell centred directions"
} "ddf"

CCTK_INT prolongation_order "Prolongation order"
{
  0:* :: ""
} 1

CCTK_INT interpolation_order "Interpolation order" STEERABLE=always
{
  0:* :: ""
} 1



BOOLEAN use_subcycling_wip "Use subcycling in time"
{
} no  



BOOLEAN do_reflux "Manage flux registers to ensure conservation"
{
} yes



BOOLEAN do_restrict "Automatically restrict fine to coarse grid functions"
{
} yes



BOOLEAN restrict_during_sync "Restrict fine to coarse grid functions when syncing"
{
} yes



CCTK_REAL dtfac "The standard timestep condition dt = dtfac*min(delta_space)"
{
  *:* :: ""
} 0.5



KEYWORD kernel_launch_method "Kernel launch method" STEERABLE=always
{
  "serial"  :: "no parallelism"
  "openmp"  :: "use OpenMP"
  "cuda"    :: "target CUDA"
  "default" :: "Use OpenMP for CPU builds and CUDA for GPU builds"
} "default"

BOOLEAN gpu_sync_after_every_kernel "Call amrex::Gpu::streamSynchronize after every kernel (EXPENSIVE)" STEERABLE=recover
{
} no



KEYWORD filereader_method "I/O method for file reader" STEERABLE=recover
{
  "error" :: "Abort with error when file reader is used"
  "openpmd" :: ""
  "silo" :: ""
} "error"

KEYWORD recover_method "I/O method for recovery" STEERABLE=recover
{
  "error" :: "Abort with error instead of recovering"
  "openpmd" :: ""
  "silo" :: ""
} "error"

KEYWORD checkpoint_method "I/O method for checkpointing" STEERABLE=recover
{
  "error" :: "Abort with error instead of checkpointing"
  "openpmd" :: ""
  "silo" :: ""
} "error"

STRING out_adios2_vars "Variables to output in ADIOS2 format" STEERABLE=always
{
  ".*" :: ""
} ""

BOOLEAN out_metadata "Output metadata in YAML format?" STEERABLE=always
{
} yes

STRING out_norm_vars "Variables to output as norms" STEERABLE=always
{
  ".*" :: ""
} "all"

BOOLEAN out_norm_omit_unstable "Omit unstable norms (e.g. maxloc)" STEERABLE=always
{
} no

STRING out_openpmd_vars "Variables to output in openPMD format" STEERABLE=always
{
  ".*" :: ""
} ""

STRING out_plotfile_groups "Groups to output as AMReX plotfile" STEERABLE=always
{
  ".*" :: ""
} ""

STRING out_silo_vars "Variables to output in Silo format" STEERABLE=always
{
  ".*" :: ""
} ""

BOOLEAN out_tsv "Output in TSV (tab-separated values) format?" STEERABLE=always
{
} no

STRING out_tsv_vars "Variables to output in TSV format" STEERABLE=always
{
  ".*" :: ""
} ""



SHARES: Cactus

USES BOOLEAN terminate_next
USES KEYWORD terminate
USES CCTK_INT cctk_itlast
USES CCTK_REAL cctk_initial_time
USES CCTK_REAL cctk_final_time
USES CCTK_REAL max_runtime
USES KEYWORD presync_mode

SHARES: IO

USES STRING filereader_ID_dir
USES STRING filereader_ID_files
USES STRING filereader_ID_vars

USES STRING out_dir
USES CCTK_INT out_every
USES KEYWORD out_mode
USES CCTK_INT out_proc_every

USES BOOLEAN checkpoint_ID
USES INT checkpoint_every
USES REAL checkpoint_every_walltime_hours
USES BOOLEAN checkpoint_on_terminate
USES STRING checkpoint_dir
USES STRING checkpoint_file

USES KEYWORD recover
USES STRING recover_dir
USES STRING recover_file

USES CCTK_REAL out_xline_y
USES CCTK_REAL out_xline_z
USES CCTK_REAL out_yline_x
USES CCTK_REAL out_yline_z
USES CCTK_REAL out_zline_x
USES CCTK_REAL out_zline_y
