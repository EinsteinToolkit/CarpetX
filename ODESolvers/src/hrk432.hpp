#include <cmath>

namespace HybridMethods {

template <typename T> static inline auto hrk432_sol_1_b0(T b3) -> T {
  using std::pow;
  using std::sqrt;
  return (-28143936 * pow(b3, 13) + 4720896 * pow(b3, 14) -
          276480 * pow(b3, 15) +
          2430 * sqrt(3) * pow(b3, 4) *
              sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                     (-2187 + 64 * pow(b3, 2)))) -
          2344 * sqrt(3) * pow(b3, 5) *
              sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                     (-2187 + 64 * pow(b3, 2)))) +
          320 * sqrt(3) * pow(b3, 6) *
              sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                     (-2187 + 64 * pow(b3, 2)))) +
          1128492 * pow(6, 0.3333333333333333) * pow(b3, 10) *
              pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) - 864 * pow(b3, 9) +
                      sqrt(3) * sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                       (-2187 + 64 * pow(b3, 2)))),
                  0.3333333333333333) +
          81 * pow(2, 0.3333333333333333) * pow(3, 0.8333333333333334) *
              pow(b3, 2) *
              sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                     (-2187 + 64 * pow(b3, 2)))) *
              pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) - 864 * pow(b3, 9) +
                      sqrt(3) * sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                       (-2187 + 64 * pow(b3, 2)))),
                  0.3333333333333333) -
          12 * pow(2, 0.3333333333333333) * pow(3, 0.8333333333333334) *
              pow(b3, 3) *
              sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                     (-2187 + 64 * pow(b3, 2)))) *
              pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) - 864 * pow(b3, 9) +
                      sqrt(3) * sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                       (-2187 + 64 * pow(b3, 2)))),
                  0.3333333333333333) -
          32805 * pow(6, 0.6666666666666666) * pow(b3, 7) *
              pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) - 864 * pow(b3, 9) +
                      sqrt(3) * sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                       (-2187 + 64 * pow(b3, 2)))),
                  0.6666666666666666) +
          11232 * pow(6, 0.6666666666666666) * pow(b3, 8) *
              pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) - 864 * pow(b3, 9) +
                      sqrt(3) * sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                       (-2187 + 64 * pow(b3, 2)))),
                  0.6666666666666666) +
          pow(2, 0.6666666666666666) * pow(3, 0.16666666666666666) *
              sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                     (-2187 + 64 * pow(b3, 2)))) *
              pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) - 864 * pow(b3, 9) +
                      sqrt(3) * sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                       (-2187 + 64 * pow(b3, 2)))),
                  0.6666666666666666) -
          162 * pow(b3, 11) *
              (295245 +
               1504 * pow(6, 0.3333333333333333) *
                   pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) -
                           864 * pow(b3, 9) +
                           sqrt(3) *
                               sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                      (-2187 + 64 * pow(b3, 2)))),
                       0.3333333333333333)) +
          8 * pow(b3, 12) *
              (8325909 +
               2080 * pow(6, 0.3333333333333333) *
                   pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) -
                           864 * pow(b3, 9) +
                           sqrt(3) *
                               sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                      (-2187 + 64 * pow(b3, 2)))),
                       0.3333333333333333)) -
          3 * pow(b3, 9) *
              (531441 * pow(6, 0.3333333333333333) *
                   pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) -
                           864 * pow(b3, 9) +
                           sqrt(3) *
                               sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                      (-2187 + 64 * pow(b3, 2)))),
                       0.3333333333333333) +
               320 * pow(6, 0.6666666666666666) *
                   pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) -
                           864 * pow(b3, 9) +
                           sqrt(3) *
                               sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                      (-2187 + 64 * pow(b3, 2)))),
                       0.6666666666666666))) /
         (24. * pow(b3, 4) * (-243 + 40 * b3) *
          (19683 * pow(b3, 7) - 8424 * pow(b3, 8) + 864 * pow(b3, 9) -
           sqrt(3) * sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                            (-2187 + 64 * pow(b3, 2))))));
}

template <typename T> static inline auto hrk432_sol_1_b1(T b3) -> T {
  using std::pow;
  using std::sqrt;
  return (-2586816 * pow(b3, 13) + 1634688 * pow(b3, 14) -
          138240 * pow(b3, 15) -
          3888 * sqrt(3) * pow(b3, 4) *
              sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                     (-2187 + 64 * pow(b3, 2)))) -
          332 * sqrt(3) * pow(b3, 5) *
              sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                     (-2187 + 64 * pow(b3, 2)))) +
          160 * sqrt(3) * pow(b3, 6) *
              sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                     (-2187 + 64 * pow(b3, 2)))) -
          577368 * pow(6, 0.3333333333333333) * pow(b3, 10) *
              pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) - 864 * pow(b3, 9) +
                      sqrt(3) * sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                       (-2187 + 64 * pow(b3, 2)))),
                  0.3333333333333333) -
          81 * pow(2, 0.3333333333333333) * pow(3, 0.8333333333333334) *
              pow(b3, 2) *
              sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                     (-2187 + 64 * pow(b3, 2)))) *
              pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) - 864 * pow(b3, 9) +
                      sqrt(3) * sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                       (-2187 + 64 * pow(b3, 2)))),
                  0.3333333333333333) +
          16 * pow(2, 0.3333333333333333) * pow(3, 0.8333333333333334) *
              pow(b3, 3) *
              sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                     (-2187 + 64 * pow(b3, 2)))) *
              pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) - 864 * pow(b3, 9) +
                      sqrt(3) * sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                       (-2187 + 64 * pow(b3, 2)))),
                  0.3333333333333333) +
          13122 * pow(6, 0.6666666666666666) * pow(b3, 7) *
              pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) - 864 * pow(b3, 9) +
                      sqrt(3) * sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                       (-2187 + 64 * pow(b3, 2)))),
                  0.6666666666666666) -
          4104 * pow(6, 0.6666666666666666) * pow(b3, 8) *
              pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) - 864 * pow(b3, 9) +
                      sqrt(3) * sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                       (-2187 + 64 * pow(b3, 2)))),
                  0.6666666666666666) +
          2 * pow(2, 0.6666666666666666) * pow(3, 0.16666666666666666) *
              sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                     (-2187 + 64 * pow(b3, 2)))) *
              pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) - 864 * pow(b3, 9) +
                      sqrt(3) * sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                       (-2187 + 64 * pow(b3, 2)))),
                  0.6666666666666666) +
          1296 * pow(b3, 11) *
              (59049 + 46 * pow(6, 0.3333333333333333) *
                           pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) -
                                   864 * pow(b3, 9) +
                                   sqrt(3) * sqrt(-(pow(b3, 14) *
                                                    pow(-243 + 40 * b3, 2) *
                                                    (-2187 + 64 * pow(b3, 2)))),
                               0.3333333333333333)) -
          4 * pow(b3, 12) *
              (6554439 +
               320 * pow(6, 0.3333333333333333) *
                   pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) -
                           864 * pow(b3, 9) +
                           sqrt(3) *
                               sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                      (-2187 + 64 * pow(b3, 2)))),
                       0.3333333333333333)) +
          pow(b3, 9) *
              (1594323 * pow(6, 0.3333333333333333) *
                   pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) -
                           864 * pow(b3, 9) +
                           sqrt(3) *
                               sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                      (-2187 + 64 * pow(b3, 2)))),
                       0.3333333333333333) +
               320 * pow(6, 0.6666666666666666) *
                   pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) -
                           864 * pow(b3, 9) +
                           sqrt(3) *
                               sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                      (-2187 + 64 * pow(b3, 2)))),
                       0.6666666666666666))) /
         (12. * pow(b3, 4) * (-243 + 40 * b3) *
          (19683 * pow(b3, 7) - 8424 * pow(b3, 8) + 864 * pow(b3, 9) -
           sqrt(3) * sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                            (-2187 + 64 * pow(b3, 2))))));
}

template <typename T> static inline auto hrk432_sol_1_b2(T b3) -> T {
  using std::pow;
  using std::sqrt;
  return (-47832768 * pow(b3, 13) + 5965056 * pow(b3, 14) -
          276480 * pow(b3, 15) +
          11178 * sqrt(3) * pow(b3, 4) *
              sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                     (-2187 + 64 * pow(b3, 2)))) -
          3784 * sqrt(3) * pow(b3, 5) *
              sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                     (-2187 + 64 * pow(b3, 2)))) +
          320 * sqrt(3) * pow(b3, 6) *
              sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                     (-2187 + 64 * pow(b3, 2)))) +
          26244 * pow(6, 0.3333333333333333) * pow(b3, 10) *
              pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) - 864 * pow(b3, 9) +
                      sqrt(3) * sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                       (-2187 + 64 * pow(b3, 2)))),
                  0.3333333333333333) +
          81 * pow(2, 0.3333333333333333) * pow(3, 0.8333333333333334) *
              pow(b3, 2) *
              sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                     (-2187 + 64 * pow(b3, 2)))) *
              pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) - 864 * pow(b3, 9) +
                      sqrt(3) * sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                       (-2187 + 64 * pow(b3, 2)))),
                  0.3333333333333333) -
          20 * pow(2, 0.3333333333333333) * pow(3, 0.8333333333333334) *
              pow(b3, 3) *
              sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                     (-2187 + 64 * pow(b3, 2)))) *
              pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) - 864 * pow(b3, 9) +
                      sqrt(3) * sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                       (-2187 + 64 * pow(b3, 2)))),
                  0.3333333333333333) +
          6561 * pow(6, 0.6666666666666666) * pow(b3, 7) *
              pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) - 864 * pow(b3, 9) +
                      sqrt(3) * sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                       (-2187 + 64 * pow(b3, 2)))),
                  0.6666666666666666) -
          3024 * pow(6, 0.6666666666666666) * pow(b3, 8) *
              pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) - 864 * pow(b3, 9) +
                      sqrt(3) * sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                       (-2187 + 64 * pow(b3, 2)))),
                  0.6666666666666666) -
          5 * pow(2, 0.6666666666666666) * pow(3, 0.16666666666666666) *
              sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                     (-2187 + 64 * pow(b3, 2)))) *
              pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) - 864 * pow(b3, 9) +
                      sqrt(3) * sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                       (-2187 + 64 * pow(b3, 2)))),
                  0.6666666666666666) +
          486 * pow(b3, 11) *
              (-452709 +
               256 * pow(6, 0.3333333333333333) *
                   pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) -
                           864 * pow(b3, 9) +
                           sqrt(3) *
                               sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                      (-2187 + 64 * pow(b3, 2)))),
                       0.3333333333333333)) -
          8 * pow(b3, 12) *
              (-21080493 +
               1760 * pow(6, 0.3333333333333333) *
                   pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) -
                           864 * pow(b3, 9) +
                           sqrt(3) *
                               sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                      (-2187 + 64 * pow(b3, 2)))),
                       0.3333333333333333)) +
          pow(b3, 9) *
              (-1594323 * pow(6, 0.3333333333333333) *
                   pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) -
                           864 * pow(b3, 9) +
                           sqrt(3) *
                               sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                      (-2187 + 64 * pow(b3, 2)))),
                       0.3333333333333333) +
               320 * pow(6, 0.6666666666666666) *
                   pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) -
                           864 * pow(b3, 9) +
                           sqrt(3) *
                               sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                      (-2187 + 64 * pow(b3, 2)))),
                       0.6666666666666666))) /
         (24. * pow(b3, 4) * (-243 + 40 * b3) *
          (19683 * pow(b3, 7) - 8424 * pow(b3, 8) + 864 * pow(b3, 9) -
           sqrt(3) * sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                            (-2187 + 64 * pow(b3, 2))))));
}

template <typename T> static inline auto hrk432_sol_1_a30(T b3) -> T {
  using std::pow;
  using std::sqrt;
  return (-6 * pow(b3, 2) * (-9 + 2 * b3) +
          (4 * pow(6, 0.6666666666666666) * pow(b3, 5) * (-81 + 14 * b3)) /
              pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) - 864 * pow(b3, 9) +
                      sqrt(3) * sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                       (-2187 + 64 * pow(b3, 2)))),
                  0.3333333333333333) +
          pow(6, 0.3333333333333333) *
              pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) - 864 * pow(b3, 9) +
                      sqrt(3) * sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                       (-2187 + 64 * pow(b3, 2)))),
                  0.3333333333333333)) /
         (144. * pow(b3, 3));
}

template <typename T> static inline auto hrk432_sol_1_a31(T b3) -> T {
  using std::pow;
  using std::sqrt;
  return (-53257824 * pow(b3, 13) + 12192768 * pow(b3, 14) -
          829440 * pow(b3, 15) -
          6561 * sqrt(3) * pow(b3, 4) *
              sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                     (-2187 + 64 * pow(b3, 2)))) -
          4752 * sqrt(3) * pow(b3, 5) *
              sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                     (-2187 + 64 * pow(b3, 2)))) +
          960 * sqrt(3) * pow(b3, 6) *
              sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                     (-2187 + 64 * pow(b3, 2)))) +
          1102248 * pow(6, 0.3333333333333333) * pow(b3, 10) *
              pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) - 864 * pow(b3, 9) +
                      sqrt(3) * sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                       (-2187 + 64 * pow(b3, 2)))),
                  0.3333333333333333) +
          8 * pow(2, 0.3333333333333333) * pow(3, 0.8333333333333334) *
              pow(b3, 3) *
              sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                     (-2187 + 64 * pow(b3, 2)))) *
              pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) - 864 * pow(b3, 9) +
                      sqrt(3) * sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                       (-2187 + 64 * pow(b3, 2)))),
                  0.3333333333333333) -
          39366 * pow(6, 0.6666666666666666) * pow(b3, 7) *
              pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) - 864 * pow(b3, 9) +
                      sqrt(3) * sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                       (-2187 + 64 * pow(b3, 2)))),
                  0.6666666666666666) +
          14256 * pow(6, 0.6666666666666666) * pow(b3, 8) *
              pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) - 864 * pow(b3, 9) +
                      sqrt(3) * sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                       (-2187 + 64 * pow(b3, 2)))),
                  0.6666666666666666) -
          1280 * pow(6, 0.6666666666666666) * pow(b3, 9) *
              pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) - 864 * pow(b3, 9) +
                      sqrt(3) * sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                       (-2187 + 64 * pow(b3, 2)))),
                  0.6666666666666666) +
          6 * pow(2, 0.6666666666666666) * pow(3, 0.16666666666666666) *
              sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                     (-2187 + 64 * pow(b3, 2)))) *
              pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) - 864 * pow(b3, 9) +
                      sqrt(3) * sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                       (-2187 + 64 * pow(b3, 2)))),
                  0.6666666666666666) +
          24 * pow(b3, 12) *
              (1594323 +
               1280 * pow(6, 0.3333333333333333) *
                   pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) -
                           864 * pow(b3, 9) +
                           sqrt(3) *
                               sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                      (-2187 + 64 * pow(b3, 2)))),
                       0.3333333333333333)) -
          81 * pow(b3, 11) *
              (-1594323 +
               4544 * pow(6, 0.3333333333333333) *
                   pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) -
                           864 * pow(b3, 9) +
                           sqrt(3) *
                               sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                      (-2187 + 64 * pow(b3, 2)))),
                       0.3333333333333333))) /
         (36. * pow(b3, 5) * (-243 + 40 * b3) *
          (19683 * pow(b3, 7) - 8424 * pow(b3, 8) + 864 * pow(b3, 9) -
           sqrt(3) * sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                            (-2187 + 64 * pow(b3, 2))))));
}

template <typename T> static inline auto hrk432_sol_1_a32(T b3) -> T {
  using std::pow;
  using std::sqrt;
  return (-131569920 * pow(b3, 13) + 21555072 * pow(b3, 14) -
          1244160 * pow(b3, 15) +
          13122 * sqrt(3) * pow(b3, 4) *
              sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                     (-2187 + 64 * pow(b3, 2)))) -
          10908 * sqrt(3) * pow(b3, 5) *
              sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                     (-2187 + 64 * pow(b3, 2)))) +
          1440 * sqrt(3) * pow(b3, 6) *
              sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                     (-2187 + 64 * pow(b3, 2)))) -
          629856 * pow(6, 0.3333333333333333) * pow(b3, 10) *
              pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) - 864 * pow(b3, 9) +
                      sqrt(3) * sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                       (-2187 + 64 * pow(b3, 2)))),
                  0.3333333333333333) -
          243 * pow(2, 0.3333333333333333) * pow(3, 0.8333333333333334) *
              pow(b3, 2) *
              sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                     (-2187 + 64 * pow(b3, 2)))) *
              pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) - 864 * pow(b3, 9) +
                      sqrt(3) * sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                       (-2187 + 64 * pow(b3, 2)))),
                  0.3333333333333333) +
          56 * pow(2, 0.3333333333333333) * pow(3, 0.8333333333333334) *
              pow(b3, 3) *
              sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                     (-2187 + 64 * pow(b3, 2)))) *
              pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) - 864 * pow(b3, 9) +
                      sqrt(3) * sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                       (-2187 + 64 * pow(b3, 2)))),
                  0.3333333333333333) +
          1944 * pow(6, 0.6666666666666666) * pow(b3, 8) *
              pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) - 864 * pow(b3, 9) +
                      sqrt(3) * sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                       (-2187 + 64 * pow(b3, 2)))),
                  0.6666666666666666) +
          12 * pow(2, 0.6666666666666666) * pow(3, 0.16666666666666666) *
              sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                     (-2187 + 64 * pow(b3, 2)))) *
              pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) - 864 * pow(b3, 9) +
                      sqrt(3) * sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                       (-2187 + 64 * pow(b3, 2)))),
                  0.6666666666666666) -
          162 * pow(b3, 11) *
              (1594323 +
               1168 * pow(6, 0.3333333333333333) *
                   pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) -
                           864 * pow(b3, 9) +
                           sqrt(3) *
                               sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                      (-2187 + 64 * pow(b3, 2)))),
                       0.3333333333333333)) +
          12 * pow(b3, 12) *
              (27103491 +
               2240 * pow(6, 0.3333333333333333) *
                   pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) -
                           864 * pow(b3, 9) +
                           sqrt(3) *
                               sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                      (-2187 + 64 * pow(b3, 2)))),
                       0.3333333333333333)) -
          pow(b3, 9) *
              (-4782969 * pow(6, 0.3333333333333333) *
                   pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) -
                           864 * pow(b3, 9) +
                           sqrt(3) *
                               sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                      (-2187 + 64 * pow(b3, 2)))),
                       0.3333333333333333) +
               320 * pow(6, 0.6666666666666666) *
                   pow(-19683 * pow(b3, 7) + 8424 * pow(b3, 8) -
                           864 * pow(b3, 9) +
                           sqrt(3) *
                               sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                                      (-2187 + 64 * pow(b3, 2)))),
                       0.6666666666666666))) /
         (144. * pow(b3, 5) * (-243 + 40 * b3) *
          (19683 * pow(b3, 7) - 8424 * pow(b3, 8) + 864 * pow(b3, 9) -
           sqrt(3) * sqrt(-(pow(b3, 14) * pow(-243 + 40 * b3, 2) *
                            (-2187 + 64 * pow(b3, 2))))));
}

} // namespace HybridMethods